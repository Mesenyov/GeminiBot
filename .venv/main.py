import os
import logging
import io
import uuid
import time
from pathlib import Path
from collections import defaultdict

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è API
import google.generativeai as genai
from dotenv import load_dotenv

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Telegram
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from PIL import Image

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import database as db

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø -------------------

load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db.init_db()
logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

MAX_FILE_SIZE = 20 * 1024 * 1024

# --- –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ (—Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥) ---
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º defaultdict(float), —á—Ç–æ–±—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Ä–µ–º—è –±—ã–ª–æ 0.0
user_last_request = defaultdict(float)

# –ó–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥.
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
COOLDOWNS = {
    "text": 3,
    "fact": 5,
    "photo": 10,
    "voice": 15,
    "video": 20,
    "settings": 2
}


def is_user_on_cooldown(user_id: int, command_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã."""
    cooldown_period = COOLDOWNS.get(command_type, 2)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 —Å–µ–∫.
    time_since_last_request = time.time() - user_last_request[user_id]

    if time_since_last_request < cooldown_period:
        logger.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ '{command_type}' —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. "
            f"–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {cooldown_period - time_since_last_request:.1f} —Å–µ–∫."
        )
        return True  # –î–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ
    return False  # –ù–µ—Ç, –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å


def update_user_timestamp(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_last_request[user_id] = time.time()


# --- –ö–æ–Ω–µ—Ü —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ ---


try:
    gemini_api_key = os.getenv("GEMINI_API_KEY")
    if not gemini_api_key:
        raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    genai.configure(api_key=gemini_api_key)
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
    logger.info("–ú–æ–¥–µ–ª—å Gemini ('gemini-1.5-flash-latest') —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini: {e}")
    model = None

# --- –ì–õ–ê–í–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê (REPLY KEYBOARD) ---
main_keyboard = [
    [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üí° –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç")],
    [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
]
main_reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)


async def send_long_message(update: Update, text: str, parse_mode: str = None):
    MAX_LENGTH = 4096
    if len(text) <= MAX_LENGTH:
        await update.message.reply_text(text, parse_mode=parse_mode)
        return
    parts = []
    while len(text) > 0:
        if len(text) <= MAX_LENGTH: parts.append(text); break
        cut_off = text.rfind('\n', 0, MAX_LENGTH)
        if cut_off == -1: cut_off = text.rfind(' ', 0, MAX_LENGTH)
        if cut_off == -1: cut_off = MAX_LENGTH
        parts.append(text[:cut_off])
        text = text[cut_off:].lstrip()
    for part in parts:
        await update.message.reply_text(part, parse_mode=part)
        time.sleep(0.5)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
    if not update.callback_query and is_user_on_cooldown(user_id, "settings"):
        return

    update_user_timestamp(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–ø–∞–º –∫–æ–º–∞–Ω–¥–æ–π /settings

    current_limit = db.get_history_limit(user_id)
    text = (f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏: *{current_limit} —Å–æ–æ–±—â–µ–Ω–∏–π*.")
    keyboard = [[InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏", callback_data='settings_limit_menu')],
                [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data='settings_clear')],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='settings_close')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def settings_limit_menu(query: Update.callback_query) -> None:
    text = "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å. (–ú–∞–∫—Å–∏–º—É–º 20)"
    keyboard = [
        [InlineKeyboardButton("4", callback_data='set_limit_4'), InlineKeyboardButton("8", callback_data='set_limit_8'),
         InlineKeyboardButton("12", callback_data='set_limit_12')],
        [InlineKeyboardButton("16", callback_data='set_limit_16'),
         InlineKeyboardButton("20", callback_data='set_limit_20')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='settings_main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    callback_data = query.data
    if callback_data == 'settings_main_menu':
        await settings_menu(update, context)
    elif callback_data == 'settings_limit_menu':
        await settings_limit_menu(query)
    elif callback_data.startswith('set_limit_'):
        limit = int(callback_data.split('_')[-1])
        db.set_history_limit(user_id, limit)
        await query.answer(f"‚úÖ –õ–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}", show_alert=True)
        await settings_menu(update, context)
    elif callback_data == 'settings_clear':
        db.clear_history(user_id)
        await query.answer("‚úÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
        await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –≠—Ç–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.")
    elif callback_data == 'settings_close':
        await query.message.delete()


# ------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –û–°–ù–û–í–ù–´–• –ö–ù–û–ü–û–ö -------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    db.clear_history(user.id)
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Google Gemini.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–æ–µ. –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        reply_markup=main_reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html(
        "üí° <b>–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –º–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º:</b>\n\n"
        "‚Ä¢ <b>–ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É</b> ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n"
        "‚Ä¢ <b>–¢–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å, –≤–∏–¥–µ–æ</b> ‚Äî —è –ø–æ–π–º—É –ª—é–±–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ <code>/settings</code> ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.\n"
        "‚Ä¢ <code>/start</code> ‚Äî –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_reply_markup
    )


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if is_user_on_cooldown(user_id, "fact"):
        return

    try:
        update_user_timestamp(user_id)
        if not model: return
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç.")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –æ–¥–∏–Ω –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç..."

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –°—Ç–∞—Ä—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–ø–∏—Ä–∞–ª—Å—è –≤ –ª–∏–º–∏—Ç:
        # response = model.generate_content(prompt)

        # –ù–æ–≤—ã–π –∫–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ª–∏–º–∏—Ç
        # –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ —á–∏—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –≤–ª–∏—è—é—â–∏–π –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat = model.start_chat(history=[])
        response = await chat.send_message_async(prompt)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        await send_long_message(update, f"üí° <b>–í–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{response.text}", parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞: {e}")
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "quota" in str(e).lower():
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        else:
            await update.message.reply_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç—å —Ñ–∞–∫—Ç.")


# ------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–ê -------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text

    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    # –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä—ã–µ –∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∫—É–ª–¥–∞—É–Ω–∞ –∑–¥–µ—Å—å,
    # —Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
    if message_text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text(
            "–°–ª—É—à–∞—é –≤–∞—Å! –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return
    if message_text == "üí° –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç":
        await random_fact(update, context)
        return
    if message_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_menu(update, context)
        return

    # --- –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ---
    if is_user_on_cooldown(user_id, "text"):
        return

    try:
        update_user_timestamp(user_id)
        if not model: return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {message_text}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        user_history = db.get_history(user_id)
        chat = model.start_chat(history=user_history)
        response = await chat.send_message_async(message_text)
        full_response_text = response.text
        db.add_message_to_history(user_id, "user", [{"text": message_text}])
        db.add_message_to_history(user_id, "model", [{"text": full_response_text}])
        await send_long_message(update, full_response_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Å –ë–î: {e}")
        await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if is_user_on_cooldown(user_id, "photo"):
        return

    try:
        if update.message.photo[-1].file_size > MAX_FILE_SIZE:
            await update.message.reply_text("üòî –û–π, —ç—Ç–æ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –õ–∏–º–∏—Ç ‚Äî 20 –ú–ë.")
            return

        update_user_timestamp(user_id)
        if not model: return

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        user_caption = update.message.caption

        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–º–ø—Ç
        if user_caption:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –ø–æ–¥–ø–∏—Å—å, –º—ã –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–µ –≤ –Ω–∞—à "—à–∞–±–ª–æ–Ω"
            prompt = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—å–±—É: '{user_caption}'. "
                "–°–Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."
            )
            log_prompt = user_caption  # –í –ª–æ–≥ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            prompt = "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ?"
            log_prompt = prompt

        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id} —Å –∑–∞–ø—Ä–æ—Å–æ–º: '{log_prompt}'")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        img = Image.open(io.BytesIO(photo_bytes))

        user_history = db.get_history(user_id)
        chat = model.start_chat(history=user_history)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π, —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        response = await chat.send_message_async([prompt, img])
        full_response_text = response.text

        # –í –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        db.add_message_to_history(user_id, "user", [{"text": log_prompt}])
        db.add_message_to_history(user_id, "model", [{"text": full_response_text}])
        await send_long_message(update, full_response_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —Å –ë–î: {e}")
        await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if is_user_on_cooldown(user_id, "voice"):
        return

    file_path, gemini_file = None, None
    try:
        if update.message.voice.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("üòî –û–π, —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –õ–∏–º–∏—Ç ‚Äî 20 –ú–ë.")
            return

        update_user_timestamp(user_id)
        if not model: return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        voice_file = await update.message.voice.get_file()
        temp_dir = Path("temp_audio");
        temp_dir.mkdir(exist_ok=True)
        file_path = temp_dir / f"{uuid.uuid4()}.ogg"
        await voice_file.download_to_drive(file_path)

        gemini_file = genai.upload_file(path=file_path)
        while gemini_file.state.name == "PROCESSING":
            time.sleep(2);
            gemini_file = genai.get_file(gemini_file.name)
        if gemini_file.state.name == "FAILED": raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ Gemini.")

        prompt = (
            "–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç–æ—á–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –∏ –¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Å—É—Ç–∏ —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ. "
            "–ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: —Ñ–æ–Ω–æ–≤—ã–π —à—É–º, —â–µ–ª—á–∫–∏, –ø–æ–º–µ—Ö–∏. "
            "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "*üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* [–∑–¥–µ—Å—å –¥–æ—Å–ª–æ–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ]\n"
            "*ü§ñ –û—Ç–≤–µ—Ç:* [–∑–¥–µ—Å—å —Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Å—É—Ç–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]"
        )
        user_history = db.get_history(user_id)
        chat = model.start_chat(history=user_history)
        response = await chat.send_message_async([prompt, gemini_file])
        full_response_text = response.text

        db.add_message_to_history(user_id, "user", [{"text": "(–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"}])
        db.add_message_to_history(user_id, "model", [{"text": full_response_text}])
        await send_long_message(update, full_response_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞ —Å –ë–î: {e}")
        await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    finally:
        if file_path and file_path.exists(): file_path.unlink()
        if gemini_file: genai.delete_file(gemini_file.name)


async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if is_user_on_cooldown(user_id, "video"):
        return

    file_path, gemini_file = None, None
    try:
        if update.message.video_note.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("üòî –û–π, —ç—Ç–æ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –õ–∏–º–∏—Ç ‚Äî 20 –ú–ë.")
            return

        update_user_timestamp(user_id)
        if not model: return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
        await update.message.reply_text("–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='upload_video')

        video_note_file = await update.message.video_note.get_file()
        temp_dir = Path("temp_video");
        temp_dir.mkdir(exist_ok=True)
        file_path = temp_dir / f"{uuid.uuid4()}.mp4"
        await video_note_file.download_to_drive(file_path)

        gemini_file = genai.upload_file(path=file_path)
        while gemini_file.state.name == "PROCESSING":
            time.sleep(5);
            gemini_file = genai.get_file(gemini_file.name)
        if gemini_file.state.name == "FAILED": raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ Gemini.")

        prompt = (
            "–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏. "
            "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ, –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è—Ö, —Ä–µ—á–∏ –∏ —ç–º–æ—Ü–∏—è—Ö. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–æ—Ç–∏–ø Telegram) –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∑–∞–ø–∏—Å–∏ (—à—É–º, –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ). "
            "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "*üé¨ –ù–∞ –≤–∏–¥–µ–æ:* [–∑–¥–µ—Å—å –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ä–µ—á–∏]\n"
            "*üí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* [–∑–¥–µ—Å—å —Ç–≤–æ–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ —Å—É—Ç–∏ —É–≤–∏–¥–µ–Ω–Ω–æ–≥–æ]"
        )
        user_history = db.get_history(user_id)
        chat = model.start_chat(history=user_history)
        response = await chat.send_message_async([prompt, gemini_file])
        full_response_text = response.text

        db.add_message_to_history(user_id, "user", [{"text": "(–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ)"}])
        db.add_message_to_history(user_id, "model", [{"text": full_response_text}])
        await send_long_message(update, full_response_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.")
    finally:
        if file_path and file_path.exists(): file_path.unlink()
        if gemini_file: genai.delete_file(gemini_file.name)


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.effective_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({update.effective_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ.")
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–¥–µ–æ! üìπ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (\"–∫—Ä—É–∂–æ—á–∫–∏\").\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ —É–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏! üòâ"
    )


# ------------------- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê -------------------
def main() -> None:
    telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not telegram_token or not model:
        logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å Gemini! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    application = Application.builder().token(telegram_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_menu))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == '__main__':
    main()